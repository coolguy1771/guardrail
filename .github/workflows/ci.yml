name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  actions: read
  contents: read
  security-events: write

env:
  GO_VERSION: '1.24'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        go-version: ['1.23', '1.24']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ matrix.go-version }}

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        shell: bash
        run: go test -v -race -covermode=atomic -coverprofile=coverage.out ./...

      - name: Check coverage with Cov
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == env.GO_VERSION
        uses: PaloAltoNetworks/cov@3.2.1
        with:
          cov_mode: coverage
          cov_file: coverage.out
          cov_threshold: "70"
          main_branch: main

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          output_name="guardrail-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          go build -o "build/${output_name}" ./cmd/guardrail

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.4.1
        with:
          name: guardrail-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/*

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        k8s-version: ['1.30', '1.31', '1.32']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get dependencies
        run: go mod download

      - name: Create kind cluster
        uses: helm/kind-action@v1.12.0
        with:
          node_image: kindest/node:v${{ matrix.k8s-version }}.0
          cluster_name: kind
          wait: 300s

      - name: Verify cluster access
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl config current-context

      - name: Run integration tests (non-cluster)
        run: go test -v -tags=integration -timeout=10m ./cmd/guardrail -run TestIntegrationCommands

      - name: Run JSON validation tests
        run: go test -v -tags=integration -timeout=5m ./cmd/guardrail -run TestIntegrationValidateJSON

      - name: Run performance tests
        run: go test -v -tags=integration -timeout=5m ./cmd/guardrail -run TestIntegrationPerformance

      - name: Apply test RBAC to cluster
        run: kubectl apply -k testdata/

      - name: Run cluster integration tests
        env:
          ENABLE_CLUSTER_TESTS: "true"
        run: go test -v -tags=integration -timeout=10m ./cmd/guardrail -run TestIntegrationCluster

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem ./... | tee benchmark.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4.4.1
        with:
          name: benchmark-results
          path: benchmark.txt

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
