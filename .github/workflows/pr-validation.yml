name: PR Validation
on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Validate PR metadata and add labels
  pr-metadata:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@48f256284bd46cdaab1048c3721360e808335d50 # v6.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure the subject
            doesn't start with an uppercase character.

      - name: Label PR by size
        uses: codelytv/pr-size-labeler@4ec67706cd878fbc1c8db0a5dcd28b6bb412e85a # v1.10.3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: "size/XS"
          xs_max_size: 10
          s_label: "size/S"
          s_max_size: 100
          m_label: "size/M"
          m_max_size: 500
          l_label: "size/L"
          l_max_size: 1000
          xl_label: "size/XL"

      - name: Auto-label based on paths
        uses: actions/labeler@8558fd74291d67161a8a78ce36a881fa63b766a9 # v5.0.0
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          sync-labels: true

  # Check for merge conflicts
  conflict-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Check for conflicts
        run: |
          git fetch origin main
          if ! git merge-base --is-ancestor origin/main HEAD; then
            echo "::warning::This PR is not up to date with main branch"
          fi

  # Run focused tests only on changed packages
  focused-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: "1.24"

      - name: Detect changed Go files
        id: changed-files
        uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62 # v47.0.0
        with:
          files: |
            **/*.go
            go.mod
            go.sum

      - name: Get changed packages
        if: steps.changed-files.outputs.any_changed == 'true'
        id: packages
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { execSync } = require('child_process');
            const output = execSync('git diff --name-only origin/main...HEAD').toString();
            const goFiles = output.split('\n').filter(file => file.endsWith('.go'));
            const packages = [...new Set(goFiles.map(file => {
              const dir = file.substring(0, file.lastIndexOf('/'));
              return dir.startsWith('./') ? dir : './' + dir;
            }))];
            return packages.join(' ');

      - name: Run focused tests on changed packages
        if: steps.changed-files.outputs.any_changed == 'true' && steps.packages.outputs.result != ''
        run: go test -v -race ${{ steps.packages.outputs.result }}

  # Security checks for dependencies
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Dependency Review
        uses: actions/dependency-review-action@56339e523c0409420f6c2c9a2f4292bbb3c07dd3 # v4.8.0
        with:
          vulnerability-check: true
          license-check: true
          deny-licenses: GPL-3.0, AGPL-3.0

  # Comment PR with helpful information
  pr-comment:
    needs: [pr-metadata, focused-tests]
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Comment on PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const prBody = context.payload.pull_request.body || '';
            const hasTests = prBody.includes('- [ ] Tests') || prBody.includes('- [x] Tests');
            const hasDocs = prBody.includes('- [ ] Documentation') || prBody.includes('- [x] Documentation');

            let comment = '👋 Thanks for submitting this pull request!\n\n';
            comment += '### Automated Checks\n';
            comment += '- ✅ PR title follows conventional commits\n';
            comment += '- 🔄 Running CI pipeline...\n';
            comment += '- 📊 Coverage report will be posted after tests complete\n\n';

            if (!hasTests) {
              comment += '⚠️ **Reminder**: Please ensure your changes include appropriate tests.\n\n';
            }

            if (!hasDocs) {
              comment += '📝 **Reminder**: Please update documentation if this PR introduces new features or changes behavior.\n\n';
            }

            comment += '### Next Steps\n';
            comment += '1. Wait for all checks to pass\n';
            comment += '2. Address any review feedback\n';
            comment += '3. Ensure branch is up to date with `main`\n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
