name: PR Validation

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

env:
  GO_VERSION: '1.24'

jobs:
  validate-pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest
    steps:
      - name: Check PR title
        uses: amannn/action-semantic-pull-request@0723387faaf9b38adef4775cd42cfd5155ed6017 # v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

  check-commits:
    name: Check Commit Messages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Check commits
        uses: wagoid/commitlint-github-action@b948419dd99f3fd78a6548d48f94e3df7f6bf3ed # v6

  size-label:
    name: Add Size Label
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Add size label
        uses: codelytv/pr-size-labeler@4ec67706cd878fbc1c8db0a5dcd28b6bb412e85a # v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: 'size/XS'
          xs_max_size: 10
          s_label: 'size/S'
          s_max_size: 100
          m_label: 'size/M'
          m_max_size: 500
          l_label: 'size/L'
          l_max_size: 1000
          xl_label: 'size/XL'
          fail_if_xl: false

  test-changes:
    name: Test Changed Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            **/*.go
          files_ignore: |
            **/*_test.go

      - name: Test changed packages
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Extract unique package paths from changed files
          PACKAGES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | \
            xargs -n1 dirname | \
            grep -E '^(cmd|pkg|internal)/' | \
            sort -u | \
            sed 's|^|./|')
          
          if [ -n "$PACKAGES" ]; then
            echo "Testing changed packages:"
            echo "$PACKAGES"
            
            # Convert packages to a space-separated list with /... appended to each
            PACKAGE_LIST=""
            for pkg in $PACKAGES; do
              PACKAGE_LIST="$PACKAGE_LIST $pkg/..."
            done
            
            # Run tests on all changed packages
            go test -v -race -covermode=atomic -coverprofile=coverage.out $PACKAGE_LIST
          fi

      - name: Check coverage on changed code
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: PaloAltoNetworks/cov@3.0.0
        with:
          cov_mode: coverage
          cov_file: coverage.out
          cov_threshold: "80"
          main_branch: main

  validate-testdata:
    name: Validate Test Data
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build guardrail
        run: go build -o guardrail ./cmd/guardrail

      - name: Validate all test data
        run: |
          # Validate each YAML file in testdata
          for file in testdata/*.yaml; do
            echo "Validating $file..."
            ./guardrail validate -f "$file" || true
          done